Backport of:

From bd670b1d4984b27d6a397b9ddafaf89ab26e4e7f Mon Sep 17 00:00:00 2001
From: David Cook <divergentdave@gmail.com>
Date: Sat, 14 Nov 2020 13:10:29 -0600
Subject: [PATCH] Follow-up to arithmetic overflow fix

Check if nmemb is zero in p11_rpc_message_alloc_extra_array to avoid a
division by zero trap. Additionally, change the reallocarray
compatibility shim so that it won't assert when resizing an array to
zero, and add the same nmemb != 0 check there.
---
 common/compat.c       | 4 ++--
 p11-kit/rpc-message.c | 2 +-
 2 files changed, 3 insertions(+), 3 deletions(-)

--- a/common/compat.c
+++ b/common/compat.c
@@ -488,6 +488,23 @@ strndup (const char *data,
 
 #endif /* HAVE_STRNDUP */
 
+#ifndef HAVE_REALLOCARRAY
+
+void *
+reallocarray (void *ptr,
+	      size_t nmemb,
+	      size_t size)
+{
+	assert (nmemb >= 0 && size >= 0);
+	if (nmemb != 0 && SIZE_MAX / nmemb < size) {
+		errno = ENOMEM;
+		return NULL;
+	}
+	return realloc (ptr, nmemb * size);
+}
+
+#endif /* HAVE_MEMDUP */
+
 #ifndef HAVE_STRCONCAT
 
 #include <stdarg.h>
--- a/p11-kit/rpc-message.c
+++ b/p11-kit/rpc-message.c
@@ -117,7 +117,7 @@ p11_rpc_message_alloc_extra_array (p11_r
 				   size_t nmemb,
 				   size_t size)
 {
-	if ((SIZE_MAX - sizeof (void *)) / nmemb < size) {
+	if (nmemb != 0 && (SIZE_MAX - sizeof (void *)) / nmemb < size) {
 		errno = ENOMEM;
 		return NULL;
 	}
--- a/common/compat.h
+++ b/common/compat.h
@@ -264,6 +264,14 @@ char *     strndup          (const char
 
 #endif /* HAVE_STRDUP */
 
+#ifndef HAVE_REALLOCARRAY
+
+void *     reallocarray     (void *ptr,
+                             size_t nmemb,
+                             size_t size);
+
+#endif /* HAVE_REALLOCARRAY */
+
 #ifdef HAVE_STDBOOL_H
 #include <stdbool.h>
 #else
